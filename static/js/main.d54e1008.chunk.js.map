{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","App","reference","useRef","useState","arret","setArret","state","setState","souhaitableValue","souhaitableText","useEffect","timer","setInterval","min","max","collection","add","date","Date","temperature","parseInt","Math","random","then","d","console","log","catch","r","current","value","clearInterval","className","type","ref","onClick","e","target","style","background","JSON","stringify","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iSAaAA,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,yCACZC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBR,IAASS,YAEQT,EAAf,E,MC+EaU,MArFf,WA6BI,IAAMC,EAAUC,iBAAO,MA7BZ,EA+BcC,mBAAS,cA/BvB,mBA+BHC,EA/BG,KA+BIC,EA/BJ,OAgCcF,oBAAS,GAhCvB,mBAgCHG,EAhCG,KAgCIC,EAhCJ,KAoCLC,EAAiBN,iBAAO,MACxBO,EAAgBP,iBAAO,MA2B/B,OAzBEQ,qBAAU,WACR,IAAMC,EAAMC,aAAY,WA5C9B,IAA4BC,EAAKC,EA6ChB,eAARV,GACU,IAARE,EACDhB,cAAqByB,WAAW,YAC/BC,IAAI,CAACC,KAAK,IAAIC,KAAQC,YAAYC,UAhDjBP,EAgD6C,EAhDxCC,EAgD0C,EA/ClEO,KAAKC,UAAYR,EAAMD,GAAOA,MAgD5BU,MAAK,SAAAC,GAAC,OAAEC,QAAQC,IAAIF,MACpBG,OAAM,SAAAC,GAAC,OAAEH,QAAQC,IAAIE,MAGtBtC,cAAqByB,WAAW,YAC/BC,IAAI,CAACC,KAAK,IAAIC,KAAQC,YAAYC,SAASnB,EAAU4B,QAAQC,SAC7DP,MAAK,SAAAC,GAAC,OAAEC,QAAQC,IAAIF,MAGvBlC,cAAqByB,WAAW,YAC/BC,IAAI,CAACC,KAAK,IAAIC,KAAQC,YAAY,iCAClCI,MAAK,SAAAC,GAAC,OAAEC,QAAQC,IAAIF,MACpBG,OAAM,SAAAC,GAAC,OAAEH,QAAQC,IAAIE,QAExB,MACF,OAAO,WAAWG,cAAcpB,MAE9B,CAACL,EAAOF,IAGV,yBAAK4B,UAAU,cACf,yBAAKA,UAAU,UACf,yBAAKA,UAAU,KACf,2BAAOC,KAAK,SAASC,IAAKjC,IAAmB,6BAC7C,4BAAQkC,QAnER,SAAqBC,IACN,IAAR9B,GACFC,GAAS,GACT6B,EAAEC,OAAOC,MAAMC,WAAW,YAE1BhC,GAAS,GACT6B,EAAEC,OAAOC,MAAMC,WAAW,WA6DA,kBAAkBC,KAAKC,UAAUnC,KAEhE,yBAAK0B,UAAU,KACb,2BAAOC,KAAK,SAASC,IAAK1B,IAA0B,6BACpD,8BAAUyB,KAAK,OAAOC,IAAKzB,IAA4B,6BACvD,4BAAQ6B,MAAO,CAACC,WAAW,WAAYJ,QApDzC,WACE7C,cAAqByB,WAAW,eAC/BC,IAAI,CAACC,KAAK,IAAIC,KAAQC,YAAYX,EAAiBqB,QAAQC,MAAOY,KAAKjC,EAAgBoB,QAAQC,QAC/FP,MAAK,SAAAC,GAAC,OAAEC,QAAQC,IAAIF,MACpBG,OAAM,SAAAC,GAAC,OAAEH,QAAQC,IAAIE,QAgDtB,qBAEF,6BACA,yBAAKI,UAAU,KACb,4BAAQA,UAAU,SAASG,QAlE7B,SAAgBC,GACH,eAARhC,GACDC,EAAS,cACT+B,EAAEC,OAAOC,MAAMC,WAAW,YAE1BlC,EAAS,cACT+B,EAAEC,OAAOC,MAAMC,WAAW,WA4DiBnC,EAAM,gBC5ErCuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.d54e1008.chunk.js","sourcesContent":["import firebase from 'firebase'\r\nimport 'firebase/firebase-database'\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAICebwY25NloL5d9aXfHZ5PkO8xsjbaVQ\",\r\n  authDomain: \"connectedobjects-9a864.firebaseapp.com\",\r\n  projectId: \"connectedobjects-9a864\",\r\n  storageBucket: \"connectedobjects-9a864.appspot.com\",\r\n  messagingSenderId: \"242966892005\",\r\n  appId: \"1:242966892005:web:28fb60e5ac967f5fcab30c\",\r\n  measurementId: \"G-SBLHSCR75C\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\n  export default firebase","import React, { useEffect, useRef, useState } from 'react'\nimport Config from './config';\nimport './App.css'\nimport * as firebase from 'firebase'\n\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction App() {  \n\n    function changeState(e){\n       if (state===true){\n         setState(false)\n         e.target.style.background=\"#d34836\"\n       } else {\n         setState(true)\n         e.target.style.background=\"green\"\n       }\n    }\n\n    function arretF(e){\n      if(arret===\"arrêter\"){\n        setArret(\"démarer\")\n        e.target.style.background=\"#d34836\"\n      }else {\n        setArret(\"arrêter\")\n        e.target.style.background=\"green\"\n      }\n    }\n\n    function souhaitableValueF(){\n      firebase.firestore().collection(\"Souhaitable\")\n      .add({date:new Date(), temperature:souhaitableValue.current.value, text:souhaitableText.current.value})\n      .then(d=>console.log(d))\n      .catch(r=>console.log(r))      \n    }\n//\n    const reference=useRef(null)\n\n    const  [arret, setArret]=useState(\"arrêter\")\n    const  [state, setState]=useState(false)\n//\n\n//\n    const souhaitableValue=useRef(null)\n    const souhaitableText=useRef(null)\n\n    useEffect(()=>{\n      const timer=setInterval(function(){\n      if(arret===\"arrêter\"){\n        if(state===false){\n          firebase.firestore().collection(\"Chambre1\")\n          .add({date:new Date(), temperature:parseInt(getRandomArbitrary(4,1))})\n          .then(d=>console.log(d))\n          .catch(r=>console.log(r))\n        }\n        else {\n          firebase.firestore().collection(\"Chambre1\")\n          .add({date:new Date(), temperature:parseInt(reference.current.value)}) \n          .then(d=>console.log(d))\n        }\n      } else {      \n        firebase.firestore().collection(\"Chambre1\")\n        .add({date:new Date(), temperature:\"Aucune température capter\"})\n        .then(d=>console.log(d))\n        .catch(r=>console.log(r))\n      }\n    },10000000000) \n    return function(){clearInterval(timer)}\n\n    },[state, arret])\n \n  return (\n    <div className=\"App-header\">\n    <div className=\"global\">\n    <div className=\"1\">\n    <input type=\"number\" ref={reference}></input><br/>\n    <button onClick={changeState}>{\"Forcer valeur :\"+JSON.stringify(state)}</button>\n    </div>\n    <div className=\"2\">\n      <input type=\"number\" ref={souhaitableValue}></input><br/>\n      <textarea type=\"text\" ref={souhaitableText}></textarea><br/>\n      <button style={{background:\"#000000\"}} onClick={souhaitableValueF}>Envoyer consigne</button>\n    </div>\n    <br/>\n    <div className=\"3\">\n      <button className=\"bouton\" onClick={arretF}>{arret+\" capteur\"}</button>\n    </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}